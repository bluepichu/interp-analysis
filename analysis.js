var AlchemyAPI = require('./api/alchemyapi');
var alchemy = new AlchemyAPI();

var Promise = require("promise");
var fs = require("fs");
var path = require("path");
var Map = require("es6-map");
var printf = require("printf");
var cheerio = require("cheerio");
var Set = require('es6-set');

var readdir = Promise.denodeify(fs.readdir);
var readFile = Promise.denodeify(fs.readFile);

var tempData = [{
  "status": "OK",
  "usage": "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html",
  "url": "",
  "totalTransactions": "2",
  "language": "english",
  "text": "power set of natural numbers\nindex set\ndoes matrix multiplication preserve inequality\nwhat is whispered in the closet shall be proclaimed from the house-tops\nstar vs the forces of evil interdimensional field trip full episode\nare non square matrices singular\nnull space of a matrix\ndefine regular matrix\ndefine singular matrix\nwilliamhu08 topcoder\nblue pichu topcoder\nbluepichu topcode4r\niwantcombo topcoder\neuler algorithm lcm\njava max recursion depth topcoder\njava max recursion depth\ndirected graph cycle detection\nchicken mcnugget theorem\ncmu printing locations\ncmu printing\ndoes the set of natural numbers include 0\nmythbusters episdoes\nmythbusters\nwolframalpha cartesian product\ncartesian product\npower set\nchrome remove from autocomplete\nsporcle puzzle hunt 2\nsporcle puzzle hunt\n8608855399\n860 area code\ncsaw ctf 2015\ncsaw 2015\nspirit seal\nao3\nstar vs the forces of evil interdimensional field trip full episode\ndubbed scene\nstar vs the forces of evil interdimensional field trip full episode\nstar vs the forces of evil\nstar vs the forces of evil interdimensional field trip full episode\nstar vs the forces of evil interdimensional field trip\nstar vs the forces of evil\nsubtle patterns\ncan talonflame clear entry hazards\nwhat is keldeo\nwhat is altaria\nwhat is altaria weakness\nwhat is ferrothorn\nwhat is ferrothron\nwhat is victini\npokemon showdown\nkeldeo resolute smogon\nkeldeo resolute\nkeldeo smogon\naltaria smogon\nferrothorn smogon\npokemon anticipation\nchoice band\nsmogon victini\nsmogon heatran\nsmogon serperior\npokemon showdown\npython openssl\npyopenssl example\npython openssl\npython rsa\npython-rsa hash and salt\npython-rsa sign with salt\npython-rsa sign without hash\npython sha512\npython rsa read pem\npython args\npython stdin read all\npython rsa\nosx uninstall program\nswift random\nswift random return range\nswift is self required\nhow long to crack 1024 bit rsa\nhow long to crack 1024 bit key\nopenssl get bit count of rsa key\nopenssl get encryption level\nrsa key cracker\ncan you determine the length of a private key from the public key\nxcode show line numbers\nhow to spoof hash and sign\nhow to break an rsa private key\ncodebreaker nsa\nopenssl rsautl sign\nbash dump a list of previous commands\nsha512 online\nsha512 block transform\ndata greater than mod len openssl rsautl\nopenssl rsautl decrypt with public key\nopenssl rsautl decrypt signed message\nopenssl decrypt signed message\nopenssl dgst verify\nhow long is sha512\ncharacter counter\nonline xor",
  "entities": [
    {
      "type": "Person",
      "relevance": "0.861595",
      "sentiment": {
        "type": "positive",
        "score": "0.634335"
      },
      "count": "2",
      "text": "keldeo smogon"
    },
    {
      "type": "Person",
      "relevance": "0.816374",
      "sentiment": {
        "type": "neutral"
      },
      "count": "2",
      "text": "ferrothorn smogon"
    },
    {
      "type": "Person",
      "relevance": "0.807206",
      "sentiment": {
        "type": "neutral"
      },
      "count": "1",
      "text": "iwantcombo topcoder"
    },
    {
      "type": "Person",
      "relevance": "0.651138",
      "sentiment": {
        "type": "neutral"
      },
      "count": "1",
      "text": "smogon heatran"
    },
    {
      "type": "Person",
      "relevance": "0.6428",
      "sentiment": {
        "type": "neutral"
      },
      "count": "1",
      "text": "smogon victini"
    },
    {
      "type": "Person",
      "relevance": "0.620696",
      "sentiment": {
        "type": "neutral"
      },
      "count": "1",
      "text": "smogon serperior"
    },
    {
      "type": "OperatingSystem",
      "relevance": "0.51319",
      "sentiment": {
        "type": "negative",
        "score": "-0.622281"
      },
      "count": "1",
      "text": "osx"
    },
    {
      "type": "Quantity",
      "relevance": "0.51319",
      "sentiment": {
        "type": "neutral"
      },
      "count": "2",
      "text": "1024 bit"
    }
  ]
}];

var entities = function(data){
	// return Promise.resolve(tempData); // test more later
	console.log("Processing data in", data.length, "chunks.");
	//process.stdout.write("Analyzing Google Data: [                    ]   0.00%\r");
	return new Promise(function(resolve, reject){
		var ret = [];

		var next = function(ind){
			alchemy.entities("text", data[ind], {sentiment: 1}, function(resp){
				ret.push(resp);
				ind++;

				// var prog = "Analyzing Google Data: [";

				// for(var i = 0; i < Math.floor(ind*20/data.length); i++){
				// 	prog += "#";
				// }

				// for(var i = 0; i < 20 - Math.floor(ind*20/data.length); i++){
				// 	prog += " ";
				// }

				// prog += "] " + printf("%6.2f%", ind*100/data.length) + "\r";

				// process.stdout.write(prog);

				if(ind >= data.length){
					process.stdout.write("\n");
					resolve(ret);
				} else {
					next(ind);
				}
			});
		};

		next(0);
	});
}

if(process.argv.length < 4){
	console.log("Usage: node analysis.js <google data folder> <facebook data folder>")
} else {
	var googlePath = process.argv[2];
	var facebookPath = process.argv[3];

	var googlePromise = readdir(googlePath)
		.then(function(listing){
			var fileReads = [];
			for(var i = 0; i < listing.length; i++){
				if(listing[i].charAt(0) != '.'){
					fileReads.push(readFile(path.join(googlePath, listing[i]), "utf8"));
				}
			}
			return Promise.all(fileReads);
		})
		.then(function(data){
			return data.map(function(el){
				return JSON.parse(el).event.reduce(function(prev, cur){
					prev.push(cur.query.query_text);
					return prev;
				}, []);
			}).reduce(function(prev, cur){
				Array.prototype.push.apply(prev, cur);
				return prev;
			}, []);
		})
		.then(function(data){
			return data.reduce(function(prev, cur){
				if(prev[prev.length-1].length + cur.length + 1 >= 5000){
					prev.push("");
				}
				prev[prev.length-1] += "\n" + cur;
				return prev;
			}, [[]]);
		})
		.then(function(data){
			//console.log(data);
			return data;
		})
		.then(entities)
		.then(function(data){
			return data.map(function(el){
				return el.entities;
			}).reduce(function(prev, cur){
				Array.prototype.push.apply(prev, cur);
				return prev;
			}, []);
		})
		.then(function(data){
			return data.filter(function(el){
				return el.type != "Quantity" && el.type != "Person";
			});
		})
		.then(function(data){
			var ret = data.reduce(function(prev, cur){
				if(prev.indexOf(cur.text) < 0){
					prev.push(cur.text);
				}
				return prev;
			}, []);

			// console.log("Google done");
			// console.log(ret);

			return ret;
		});

	var facebookPromise = readFile(path.join(facebookPath, "html", "wall.htm"))
		.then(function(data){
			return cheerio.load(data);
		})
		.then(function($){
			var res = [];
			
			$("div.comment").each(function(i, el){
				res.push($(el).text());
			});

			return res;
		})
		.then(function(data){
			//console.log(data);
			return data;
		})
		.then(function(data){
			return data.reduce(function(prev, cur){
				if(prev[prev.length-1].length + cur.length + 1 >= 5000){
					prev.push("");
				}
				prev[prev.length-1] += "\n" + cur;
				return prev;
			}, [[]]);
		})
		.then(entities)
		.then(function(data){
			return data.map(function(el){
				return el.entities;
			}).reduce(function(prev, cur){
				Array.prototype.push.apply(prev, cur);
				return prev;
			}, []);
		})
		.then(function(data){
			var ret = data.filter(function(el){
				return el.type != "Quantity" && el.type != "Person";
			});

			// console.log(ret);
			return ret;
		})
		.then(function(data){
			var ret = data.reduce(function(prev, cur){
				if(prev.indexOf(cur.text) < 0){
					prev.push(cur.text);
				}
				return prev;
			}, []);

			// console.log("Facebook done");
			// console.log(ret);

			return ret;
		});

	Promise.all([googlePromise, facebookPromise])
		.then(function(data){
			var googlekw = data[0];
			var facebookkw = data[1];

			console.log("Google:", googlekw);
			console.log("Facebook:", facebookkw);

			var googleMinusFacebook = googlekw
				.slice(0, googlekw.length)
				.filter(function(el){
					return facebookkw.indexOf(el) < 0;
				});

			var facebookMinusGoogle = facebookkw
				.slice(0, facebookkw.length)
				.filter(function(el){
					return googlekw.indexOf(el) < 0;
				});

			var intersection = googlekw
				.slice(0, googlekw.length)
				.filter(function(el){
					return facebookkw.indexOf(el) >= 0;
				});

			console.log("Facebook but not Google:", facebookMinusGoogle.length);
			console.log("Google but not Facebook:", googleMinusFacebook.length);
			console.log("Both:", intersection.length);
		})
		.catch(function(err){
			console.error("ERROR: " + err.stack);
		});
}